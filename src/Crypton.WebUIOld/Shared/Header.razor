<nav class="navbar navbar-expand bg-body-tertiary p-2 px-3" xmlns="http://www.w3.org/1999/html">
    <div class="container-fluid justify-content-between text-start">
        <div>
            <a href="/" class="navbar-brand fw-bold fs-4">
                Crypton
                <Icon Name="IconName.GpuCard" Color="IconColor.Primary"/>
            </a>
        </div>

        <div class="d-block d-sm-flex gap-2 me-sm-auto" id="navbar">
            <Dropdown Class="d-none d-sm-block" Direction="DropdownDirection.DropdownCentered">
                <DropdownToggleButton Class="@(IsLight ? "btn-outline-dark" : "btn-outline-light")">
                    Games
                </DropdownToggleButton>

                <DropdownMenu Class="fw-4">
                    <DropdownItem To="#" Type="ButtonType.Link"
                                  Class="d-flex flex-row"
                                  Style="padding: 0.2rem 0.6rem!important;">
                        <div class="m-1 me-2">
                            <Icon Name="IconName.SuitClub" Color="IconColor.Warning" Size="IconSize.x3"/>
                        </div>

                        <div class="d-flex flex-column">
                            <span class="fw-bold fs-5">Blackjack</span>
                            <span class="fw-bold text-muted">Blackjack</span>
                        </div>
                    </DropdownItem>

                    <DropdownItem To="#" Type="ButtonType.Link"
                                  Class="d-flex flex-row"
                                  Style="padding: 0.2rem 0.6rem!important;">
                        <div class="m-1 me-2">
                            <Icon Name="IconName.Dice5" Color="IconColor.Warning" Size="IconSize.x3"/>
                        </div>

                        <div class="d-flex flex-column">
                            <span class="fw-bold fs-5">Gamble</span>
                            <span class="fw-bold text-muted">Roll the dice</span>
                        </div>
                    </DropdownItem>

                    <DropdownItem To="#" Type="ButtonType.Link"
                                  Class="d-flex flex-row"
                                  Style="padding: 0.2rem 0.6rem!important;">
                        <div class="m-1 me-2">
                            <Icon Name="IconName.GraphUpArrow" Color="IconColor.Warning" Size="IconSize.x3"/>
                        </div>

                        <div class="d-flex flex-column">
                            <span class="fw-bold fs-5">Upgrade</span>
                            <span class="fw-bold text-muted">Upgrade your skin</span>
                        </div>
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>

            <Dropdown Class="d-none d-sm-block" Direction="DropdownDirection.DropdownCentered">
                <DropdownToggleButton Class="@(IsLight ? "btn-outline-dark" : "btn-outline-light")">
                    Wallet
                </DropdownToggleButton>

                <DropdownMenu Class="fw-4">
                    <DropdownItem To="#" Type="ButtonType.Link"
                                  Class="d-flex flex-row"
                                  Style="padding: 0.2rem 0.6rem!important;">
                        <div class="m-1 me-2">
                            <Icon Name="IconName.CalendarDate" Color="IconColor.Warning" Size="IconSize.x3"/>
                        </div>

                        <div class="d-flex flex-column">
                            <span class="fw-bold fs-5">Daily</span>
                            <span class="fw-bold text-muted">Collect daily reward</span>
                        </div>
                    </DropdownItem>

                    <DropdownItem To="#" Type="ButtonType.Link"
                                  Class="d-flex flex-row"
                                  Style="padding: 0.2rem 0.6rem!important;">
                        <div class="m-1 me-2">
                            <Icon Name="IconName.Send" Color="IconColor.Warning" Size="IconSize.x3"/>
                        </div>

                        <div class="d-flex flex-column">
                            <span class="fw-bold fs-5">Send</span>
                            <span class="fw-bold text-muted">Send someone money</span>
                        </div>
                    </DropdownItem>

                    <DropdownItem To="#" Type="ButtonType.Link"
                                  Class="d-flex flex-row"
                                  Style="padding: 0.2rem 0.6rem!important;">
                        <div class="m-1 me-2">
                            <Icon Name="IconName.ClockHistory" Color="IconColor.Warning" Size="IconSize.x3"/>
                        </div>

                        <div class="d-flex flex-column">
                            <span class="fw-bold fs-5">History</span>
                            <span class="fw-bold text-muted">See past transactions</span>
                        </div>
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>

            <div class="d-none d-sm-block">
                <ThemeToggle/>
            </div>
        </div>

        <div>
            <AuthorizeView>
                <Authorized>
                    <span class="fw-bolder @(IsLight ? "text-black" : "text-white")">
                        Hello @context.User.Identity?.Name
                    </span>
                </Authorized>
                <NotAuthorized>
                    <div class="gap-2">
                        <Button class="btn btn-success" @onclick="OpenModalAsync">
                            Sign In
                        </Button>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

<Modal @ref="Modal" IsVerticallyCentered="true" Size="ModalSize.Large" ModalType="ModalType.Dark" Class="bg-blur p-0 px-3">
    <HeaderTemplate>
        <div class="px-1 fw-bold text-bg-white fs-4">
            @switch (AuthModalState)
            {
                case AuthModalState.Login:
                    <span>Welcome back!</span>
                    break;

                case AuthModalState.Register:
                    <span>Welcome to Crypton!</span>
                    break;

                case AuthModalState.Recover:
                    <span>Let's get your account back!</span>
                    break;

                case AuthModalState.TwoFactor:
                    <span>Let's verify ownership!</span>
                    break;

                default:
                    throw new ArgumentOutOfRangeException();
            }
        </div>
    </HeaderTemplate>
</Modal>

@code
{
    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    public Modal Modal { get; set; } = default!;
    public AuthModalState AuthModalState { get; set; } = default!;

    private async Task OpenModalAsync()
    {
        var parameters = new Dictionary<string, object>
        {
            { "State", AuthModalState.Login },
            { "OnStateChange", EventCallback.Factory.Create<AuthModalState>(this, state => AuthModalState = state) }
        };

        await Modal.ShowAsync<AuthModal>(string.Empty, parameters: parameters);
    }
}